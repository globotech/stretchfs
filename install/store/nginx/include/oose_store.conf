# tracking info
add_header X-Peer $hostname;

# per client rate limiting
limit_req zone=flood burst=200;

# set default rate
limit_rate_after 10m;
set $limit_rate 1024k;

# set override  rate
if ($arg_rate) {
  set $limit_rate $arg_rate;
}

# set attachment name if needed
set $attach_content "inline";
if ($arg_attach) {
  set $attach_content "attachment; filename=$arg_attach";
}
add_header "Content-Disposition" $attach_content;

# server status
location /nginx_status {
  stub_status on;
}

location / {
  index index.html;
}

#if ($http_referer = "") {
#  return 403;
#}

# here we want to rewrite by lua to make nginx use the proper URI
rewrite_by_lua_block {
  local http = require "resty.http"
  local httpc = http.new()
  local lookupuri = "https://" .. ngx.var.store_ip .. ":" .. ngx.var.store_port .. "/purchase/uri" .. ngx.var.request_uri
  local res, err = httpc:request_uri(lookupuri,{
    ssl_verify = false
  })
  if not res then
    ngx.log(1,"failed to request uri from backend")
  else
    ngx.req.set_uri(res.body)
  end
}

#ngx.req.set_uri(uri)
# turn on open file cache
open_file_cache          max=100000 inactive=2m;
open_file_cache_valid    60s;
open_file_cache_min_uses 1;
open_file_cache_errors   on;

# turn on the appropriate streaming module
location ~* mp4 {
  mp4;
  mp4_buffer_size 64m;
  mp4_max_buffer_size 128m;
  #output_buffers 1 4m;
  #aio on;
  #directio 128m;
}
location ~* flv {
  flv;
  #output_buffers 1 4m;
  #aio on;
  #directio 128m;
}

