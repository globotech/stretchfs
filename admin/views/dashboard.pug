extends layout
block content
  .container
    h1 Dashboard
    div(style='width: 1140px; padding: 0 50px;')
      .dashboard-big-box
        #rate 0
        h3 Req/s
      .dashboard-big-box
        #reqCount 0
        h3 Requests
      .dashboard-big-box
        #inventoryCount 0
        h3 Inventory Items
      .dashboard-big-box
        #copyCount 0
        h3 Inventory Copies
      .dashboard-big-box
        #sizeCount(style='font-size: 1.3em; display: inline;') 0
        #sizeLabel(style='font-size: 1em; display: inline;') B
        h3 Space Used
      .dashboard-big-box
        #sizeTotalCount(style='font-size: 1.3em; display: inline;') 0
        #sizeTotalLabel(style='font-size: 1em; display: inline;') B
        h3 Total Space
      .dashboard-big-box
        #jobCount 0
        h3 Active Jobs
      .dashboard-big-box
        #prismCount 0
        h3 Active Prisms
      .dashboard-big-box
        #storeCount 0
        h3 Active Stores
      .clear-both
    canvas#mushroomHistory(width='1140', height='300', style='width: 1140; height: 300px; display: block')
    .row
      .col-md-6
        h2 Todays Top 10 Items
        table.table.table-striped
          thead
            tr
              th Hash
              th Hits
              th Transfer
          tbody#topItemsBody
            tr
              td(colspan='4') No inventory items to display.
      .col-md-6
        h2 Todays Top 10 Purchases
        table.table.table-striped
          thead
            tr
              th Purchase
              th Hash
              th Hits
              th Transfer
          tbody#topPurchasesBody
            tr
              td(colspan='4') No purchases to display.
    script(src='/node_modules/jquery-ui-dist/jquery-ui.min.js')
    script(src='/js/jquery.animateNumber.min.js')
    script(src='/node_modules/chart.js/dist/Chart.bundle.min.js')
    script.
      var commaSepStep = $.animateNumber.numberStepFactories.separator(',')
      var updateStat = function(id,num){
        $('#' + id).animateNumber(
          {number: num,numberStep: commaSepStep},
          1000,
          function(){
            $('#' + id).prop('number',num)
          }
        )
      }
      var updateSize = function(id,num){
        var parts = num.split(' ')
        var size = parts[0]
        var label = parts[1]
        $('#' + id + 'Count').animateNumber(
          {number: size,numberStep: commaSepStep},
          1000,
          function(){
            $('#' + id + 'Count').prop('number',size)
          }
        )
        $('#' + id + 'Label').text(label)
      }
      var graphExists = false
      var stretchHistory = {}
      var drawGraph = function(data){
        var graphContainer = document.getElementById('mushroomHistory');
        if(!graphExists){
          graphExists = true
          stretchHistory = new Chart(graphContainer,{
            type: 'line',
            data: {
              labels: data.labels,
              datasets: [
                {
                  data: data.data,
                  fill: true,
                  label: 'Requests',
                  backgroundColor: '#cdd0d6',
                  borderColor: '#2b6bd1'
                }
              ]
            }
          });
        }
        else{
          stretchHistory.data.labels = data.labels;
          stretchHistory.data.datasets[0].data = data.data;
          stretchHistory.update();
        }
      }
      var topItemsBody = $('#topItemsBody')
      var topPurchases = $('#topPurchasesBody')
      var progressBar = $('#progressBar')
      var progressCount = 1
      var progressPercentPrevious = 10
      var intervalSeconds = 10
      var intervalMilliseconds = intervalSeconds * 1000
      var intervalStepPercent = 100 / intervalSeconds
      var updateTopItems = function(inventoryList){
        var rows = []
        inventoryList.forEach(function(row){
          var tr = $(document.createElement('tr'));
          tr.append($("<td><div><a href='/inventory/edit?id=" + row.hash + "'>" + row.hash + "</a></div></td>"));
          tr.append($("<td>" + row.hitCount || 0 + "</td>"));
          tr.append($("<td>" + row.byteCount || 0 + "</td>"));
          rows.push(tr);
        })
        topItemsBody.empty()
        topItemsBody.append(rows)
      }
      var updateTopPurchases = function(purchaseList){
        var rows = []
        purchaseList.forEach(function(row){
          var tr = $(document.createElement('tr'));
          tr.append($("<td><div><a href='/purchase/edit?id=" + row.token + "'>" + row.token + "</a></div><div><a href='/inventory/edit?id=" + row.hash + "' style='color: #555; font-size: 10px;'>" + row.hash + "</a></div></td>"));
          tr.append($("<td>" + row.hitCount || 0 + "</td>"));
          tr.append($("<td>" + row.byteCount || 0 + "</td>"));
          rows.push(tr);
        })
        topPurchases.empty()
        topPurchases.append(rows)
      }
      var updateProgressBar = function(progressPercent){
        if(!progressPercent){
          progressPercent = Math.round(progressCount * intervalStepPercent)
        }
        if(progressPercent > 100) progressPercent = 100
        if(progressPercent < 1) progressPercent = 1
        if(progressPercentPrevious > progressPercent){
          progressBar.css({width: progressPercent + '%'})
        }
        else{
          progressBar.animate({width: progressPercent + '%'},500)
        }
        progressPercentPrevious = progressPercent
        progressCount++
      }
      var lastHitCount = 0
      var updateRate = function(reqCount){
        if(0 === lastHitCount){
          lastHitCount = reqCount
          updateStat('rate',0)
        }
        else{
          var delta = reqCount - lastHitCount
          lastHitCount = reqCount
          if(delta < 0) delta = delta * -1
          var rate = delta / intervalSeconds
          updateStat('rate',rate)
        }
      }
      var updateDashboard = function(){
        $.getJSON('/dashboard/getUpdate',{},function(data){
          if(!data || !data.stats){
            console.log(data)
            throw new Error('Invalid dashboard update response')
          }
          updateStat('reqCount',data.stats.reqCount)
          updateStat('inventoryCount',data.stats.inventoryCount)
          updateStat('copyCount',data.stats.copyCount)
          updateSize('size',data.stats.sizeHuman)
          updateSize('sizeTotal',data.stats.sizeTotalHuman)
          updateStat('jobCount',data.stats.jobCount)
          updateStat('prismCount',data.stats.prismCount)
          updateStat('storeCount',data.stats.storeCount)
          drawGraph(data.history)
          updateTopItems(data.inventoryList)
          updateTopPurchases(data.purchaseList)
          updateRate(data.stats.reqCount)
        })
        progressCount = 1
      }

      $(document).ready(function(){
        setInterval(updateDashboard,intervalMilliseconds)
        setInterval(updateProgressBar,1000)
        updateDashboard()
      })
